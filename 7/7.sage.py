

# This file was *autogenerated* from the file 7/7.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0p5 = RealNumber('0.5'); _sage_const_0 = Integer(0)#Coppersmith's Short Pad 
from sage.all import *
from Crypto.Util.number import *

with open("7/output.txt", "r") as f:
    n = Integer(int(f.readline().split(" = ")[_sage_const_1 ]))
    e = Integer(int(f.readline().split(" = ")[_sage_const_1 ]))
    c1 = Integer(int(f.readline().split(" = ")[_sage_const_1 ]))
    c2 = Integer(int(f.readline().split(" = ")[_sage_const_1 ]))

pgcd = lambda g1, g2: g1.monic() if not g2 else pgcd(g2, g1%g2)

def attack(n, e, c1, c2):
    PRxy = PolynomialRing(Zmod(n), names=('x', 'y',)); (x, y,) = PRxy._first_ngens(2)
    PRx = PolynomialRing(Zmod(n), names=('xn',)); (xn,) = PRx._first_ngens(1)
    PRZZ = PolynomialRing(Zmod(n), names=('xz', 'yz',)); (xz, yz,) = PRZZ._first_ngens(2)

    g1 = x**e - c1
    g2 = (x+y)**e - c2

    q1 = g1.change_ring(PRZZ)
    q2 = g2.change_ring(PRZZ)

    h = q2.resultant(q1)
    h = h.univariate_polynomial()
    h = h.change_ring(PRx).subs(y=xn)
    h = h.monic()

    kbits = n.nbits()//(_sage_const_2 *e*e)
    diff = h.small_roots(X=_sage_const_2 **kbits, beta=_sage_const_0p5 )[_sage_const_0 ]  # find root < 2^kbits with factor >= n^0.5

    m = PolynomialRing(Zmod(n), 'm').gen()
    f1 = m**e - c1
    f2 = (m + diff)**e - c2
    m = int(-pgcd(f1, f2)[_sage_const_0 ])
    return m

m = attack(n, e, c1, c2)
print(long_to_bytes(int(m)))


